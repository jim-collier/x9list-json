#!/bin/bash
# shellcheck disable=2001  ## Complaining about use of sed istead of bash search & replace.
# shellcheck disable=2002  ## Useless use of cat. This works well though and I don't want to break it for the sake of syntax purity.
# shellcheck disable=2004  ## Inappropriate complaining of "$/${} is unnecessary on arithmetic variables."
# shellcheck disable=2034  ## Unused variables.
# shellcheck disable=2086
# shellcheck disable=2119  ## Disable confusing and inapplicable warning about function's $1 meaning script's $1.
# shellcheck disable=2120  ## OK with declaring variables that accept arguments, without calling with arguments (this is 'overloading').
# shellcheck disable=2143  ## Used grep -q instead of echo | grep
# shellcheck disable=2155  ## Disable check to 'Declare and assign separately to avoid masking return values'.
# shellcheck disable=2162
# shellcheck disable=2181
# shellcheck disable=2317  ## Can't reach

##	Purpose: See fPrint_WillDo().
##	History:
##		- 20240501 JC: Created from TEMPLATE_simple_20240623.

## Constants
declare    meName="$(basename "${BASH_SOURCE[0]}")"

## Options

## Boilerplate constants (remove read-only for scripts designed for recursion).
declare -r -i doSkipIntroStuff=0
declare -r -i doQuietly=0; [[ "${TEMPLATE_QUIET}" == "1" ]] && doQuietly=1
declare -r    thisVersion="0.9.0"
declare -r    copyrightYear="2024"
declare -r    author="Jim Collier"

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
fPrint_Copyright(){ ((doQuietly)) && return; fEcho_Clean "";
	cat <<- EOF_q9tan
		${meName} version ${thisVersion}
		Copyright (c) ${copyrightYear} ${author}.
		License GPLv3+: GNU GPL version 3 or later, full text at:
		    https://www.gnu.org/licenses/gpl-3.0.en.html
		There is no warranty, to the extent permitted by law.
	EOF_q9tan
	fEcho_Force ""
}
fPrint_WillDo(){ fEcho_Clean "";
	#  X-------------------------------------------------------------------------------X
	cat <<- EOF_r5k9t
		List the contents of one or more JSON files, in prettified format.
	EOF_r5k9t
	#  X-------------------------------------------------------------------------------X
	fEcho_Force
}
fPrintSyntax(){ ((doQuietly)) && return; fEcho_Clean "";
	#  X-------------------------------------------------------------------------------X
	cat <<- EOF_ng50ne2
		Syntax: ${meName}  [path]  [file match for 'find']  [min depth]  [max depth]
	EOF_ng50ne2
	#  X-------------------------------------------------------------------------------X
	fEcho_Force
}


#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
fMain(){

	## Args
	local -r raw_arg1="$1"
	local -r raw_arg2="$2"
	local -r raw_arg3="$3"
	local -r raw_arg4="$4"

	## Constants
	local -r serialDateTime="$(date '+%Y%m%d-%H%M%S')"

	## Variables
	local    startPath=""

	## Determine if we need to show help
	case " ${allArgs,,} " in
		*" -h "*|*" --help "*)                 fPrint_Copyright_WillDo_Syntax 1; exit 0 ;;
		*" -v "*|*" --ver "*|*" --version "*)  fPrint_Copyright_WillDo_Syntax  ; exit 0 ;;
	esac

	## Init variables
	[[ -z "${startPath}" ]] && startPath="."

	## Validate
	[[ -z   "$(which python 2>/dev/null || true)" ]] && errMsg_MissingDeps="${errMsg_MissingDeps}\npython"
	[[ -z   "$(which find   2>/dev/null || true)" ]] && errMsg_MissingDeps="${errMsg_MissingDeps}\nfind"
	if [[ -n "${errMsg_MissingDeps}" ]]; then
		## Clean up and show error message
		errMsg_MissingDeps="**** MISSING DEPENDENCIES ****:\n${errMsg_MissingDeps}"
		fEcho_Clean "${errMsg_MissingDeps}"
		fPrint_Copyright_WillDo_Syntax
		exit 1
	fi

	## Process macros in variables
	zipMountDir="${zipMountDir//'•FILENAME•'/"${zipFileName}"}" #...............: Supports macros "•FILENAME•" and "•SERIAL•"
	local -r zipMountDir="${zipMountDir}"

	## Prompt to continue
	fEcho_Clean
	fPrint_Copyright; fPrint_WillDo
	fEcho_Clean
	read -r -p "Continue? (y/n): " answer
	fEcho_ResetBlankCounter
	if [[ "${answer,,}" != "y" ]]; then
		fEcho "User aborted."
		exit 1
	fi


	## Done

}


function fCleanup(){

	if ((! doSkipIntroStuff)) && ((! doQuietly)); then :;
		fEcho_Clean
	fi

}


fPrint_Copyright_WillDo_Syntax(){
	fPrint_Copyright
	fPrint_WillDo
	fPrintSyntax
}


#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
##	Generic code.
#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

fUmount(){

	## Purpose: Unmount a directory, safely at first, then with increasingly agressive tactics.
	## Args:
	##		1: Dir
	##		2: Ignore errors? [boolean], default 0 (will fail on errers).

	## Args
	local    -r unmountDir="$1"
	local       raw_ignoreError="$2"

	## Convert string arg[s] to boolean constant[s]
	local -i ignoreError=0; [[ "${raw_ignoreError}" =~ "1"|"true"|"TRUE" ]] && ignoreError=1; local -i -r ignoreError=$ignoreError

	## Validate
	[[   -z "${unmountDir}"              ]] && fThrowError  "No directory to unmount specified."                    "${FUNCNAME[0]}"
	[[ ! -d "${unmountDir}"              ]] && fThrowError  "Directory to unmount doesn't exist: '${unmountDir}'."  "${FUNCNAME[0]}"
	[[      "${unmountDir}" == "/"       ]] && fThrowError  "I refuse to try to unmount '/'!."                      "${FUNCNAME[0]}"
	[[      "${unmountDir}" == "${HOME}" ]] && fThrowError  "I refuse to try to unmount '${HOME}'!."                "${FUNCNAME[0]}"

	if [[ -z "$(mount | grep " ${unmountDir} " 2>/dev/null || true)" ]]; then
		fEcho "No need to umnout, as it's not mounted: '${unmountDir}' ..."
		return 0
	else
		fEcho "Unmounting '${unmountDir}' ..."
		umount "${unmountDir}" || true
	fi

	[[ -z "$(mount | grep " ${unmountDir} " 2>/dev/null || true)" ]] && return 0
	echo "Getting sudo for more forceful 'umount' ..."
	sudo echo "Sudo got."
	sync; sleep 1
	sudo umount -fR "${unmountDir}" || true

	[[ -z "$(mount | grep " ${unmountDir} " 2>/dev/null || true)" ]] && return 0
	sudo umount -fAR "${unmountDir}" || true

	[[ -z "$(mount | grep " ${unmountDir} " 2>/dev/null || true)" ]] && return 0
	sudo umount -fARl "${unmountDir}" || true
	sync; sleep 1

	[[ $ignoreError -eq 0 ]] && [[ -n "$(mount | grep " ${unmountDir} " 2>/dev/null || true)" ]] && fThrowError "Unable to unmount '${unmountDir}'." "${FUNCNAME[0]}"

}

fRmDir(){

	## Purpose: A little more safe rm. Optionally won't delete a non-empty dir.
	## Args:
	##		1: Dir
	##		2: Must be empty? [boolean], default 1 (must be empty or else will fail).

	local    -r rmDir="$1"
	local       raw_ignoreError="$2"
	local       raw_mustBeEmpty="$3"

	## Convert string arg[s] to boolean constant[s]
	local -i ignoreError=0; [[ "${raw_ignoreError}" =~ "1"|"true"|"TRUE" ]] && ignoreError=1; local -i -r ignoreError=$ignoreError
	local -i mustBeEmpty=1; [[ "${raw_mustBeEmpty}" =~ "1"|"true"|"TRUE" ]] && mustBeEmpty=1; local -i -r mustBeEmpty=$mustBeEmpty

	## Validate
	[[   -z "${rmDir}"               ]] && fThrowError  "No folder to delete specified."               "${FUNCNAME[0]}"
	[[ ! -d "${rmDir}"               ]] && fThrowError  "Folder to delete doesn't exist: '${rmDir}'."  "${FUNCNAME[0]}"
	[[      "${rmDir}" == "/"        ]] && fThrowError  "I refuse to try to delete '/'!."              "${FUNCNAME[0]}"
	[[      "${rmDir}" == "${HOME}"  ]] && fThrowError  "I refuse to try to delete '${HOME}/'!."       "${FUNCNAME[0]}"
	[[      "${rmDir}" == "${HOME}/" ]] && fThrowError  "I refuse to try to delete '${HOME}/'!."       "${FUNCNAME[0]}"

	## Is empty?
	if [[ $mustBeEmpty -eq 1 ]] && [[ -n "$(ls -A "${rmDir}" 2>/dev/null || true)" ]]; then
		fThrowError  "Can't delete non-empty folder '${rmDir}/'." "${FUNCNAME[0]}"
	fi

	fEcho "Removing folder '${rmDir}' ..."

	if [[ $ignoreError -eq 1 ]]; then
		rm -rf "${rmDir}" 2>/dev/null || true
	else
		rm -rf "${rmDir}"
	fi

}


#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
##	Generic echo-related stuff.
##	History:
##		- 20190911 JC: Created (mostly by copying TEMPLATE_v*)
#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
declare -i _wasLastEchoBlank=0
function fEcho_Clean(){
	if [[ -n "$*" ]]; then
		echo -e "$*"
		_wasLastEchoBlank=0
	elif [[ $_wasLastEchoBlank -eq 0 ]] && echo; then
		_wasLastEchoBlank=1
	fi
}
# shellcheck disable=2120  ## References arguments, but none are ever passed; Just because this library function isn't called here, doesn't mean it never will in other scripts.
function fEcho()                   { if [[ -n "$*" ]]; then fEcho_Clean "[ $* ]"; else fEcho_Clean ""; fi; }
function fEcho_Force()             { fEcho_ResetBlankCounter; fEcho "$*";                                  }
function fEcho_Clean_Force()       { fEcho_ResetBlankCounter; fEcho_Clean "$*";                            }
function fEchoVarAndVal()          { fEcho_Clean "${2}${1} = '${!1}'";                                     }
function fEcho_ResetBlankCounter() { _wasLastEchoBlank=0;                                                  }

#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
##	Generic error-handling  stuff.
##	History
##		- 20190826 JC: Created by copying from 0_library_v2.
##		- 20190919 JC: Slight tweaks to improve newline output.
#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
declare -i _wasCleanupRun=0
function _fTrap_Exit(){
	if [[ "${_wasCleanupRun}" == "0" ]]; then  ## String compare is less to fail than integer
		_wasCleanupRun=1
		_fSingleExitPoint "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}"
	fi
}
function _fTrap_Error(){
	if [[ "${_wasCleanupRun}" == "0" ]]; then  ## String compare is less to fail than integer
		_wasCleanupRun=1
		fEcho_ResetBlankCounter
		_fSingleExitPoint "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}" "${21}" "${22}" "${23}" "${24}" "${25}" "${26}" "${27}" "${28}" "${29}" "${30}" "${31}" "${32}"
	fi
}
function _fTrap_Error_Ignore(){ true; }
function _fSingleExitPoint(){
	local -r signal="$1";  shift || true
	local -r lineNum="$1"; shift || true
	local -r errNum="$1";  shift || true
	local -r errMsg="$*"
	if [[ "${signal}" == "INT" ]]; then
		fEcho_Force
		fEcho "User interrupted."
		fCleanup  ## User cleanup
		exit 1
	elif [[ "${errNum}" != "0" ]] && [[ "${errNum}" != "1" ]]; then  ## Clunky string compare is less likely to fail than integer
		fEcho_Clean
		fEcho_Clean "Signal .....: '${signal}'"
		fEcho_Clean "Err# .......: '${errNum}'"
		fEcho_Clean "Error ......: '${errMsg}'"
		fEcho_Clean "At line# ...: '${lineNum}'"
		fEcho_Clean
		fCleanup  ## User cleanup
	else
		fCleanup  ## User cleanup
	fi
}
function fThrowError(){
	local errMsg="$1"
	local funcName="$2"
	[[ -z "${errMsg}" ]] && errMsg="An error occurred."
	if [[ -z "${errMsg}" ]]; then
		errMsg="${meName}: ${errMsg}"
	else
		errMsg="${meName}.$2(): ${errMsg}"
	fi
	fEcho_Clean
	fEcho_Clean "${errMsg}"
	fEcho_Clean
	exit 1
}
function fDefineTrap_Error_Fatal(){ true; trap '_fTrap_Error ERR     ${LINENO} $? $_' ERR; set -e; }
function fDefineTrap_Error_Ignore(){ trap '_fTrap_Error_Ignore' ERR; set +e; }


#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
## Execution entry point (do not modify)
#•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••

## Define error and exit handling
set -eE
fDefineTrap_Error_Fatal
trap '_fTrap_Error SIGHUP  ${LINENO} $? $_' SIGHUP
trap '_fTrap_Error SIGINT  ${LINENO} $? $_' SIGINT    ## CTRL+C
trap '_fTrap_Error SIGTERM ${LINENO} $? $_' SIGTERM
trap '_fTrap_Exit  EXIT    ${LINENO} $? $_' EXIT
trap '_fTrap_Exit  INT     ${LINENO} $? $_' INT
trap '_fTrap_Exit  TERM    ${LINENO} $? $_' TERM

fEcho
fMain "${1}" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}" "${17}" "${18}" "${19}" "${20}"
